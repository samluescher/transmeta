{"name":"Transmeta","tagline":"A data transformation library to filter and convert JSON documents into other structured data, using simple meta descriptions instead of code.","body":"Overview\r\n--------\r\n\r\nThis is the age of micro formats and messy CSV files containing valuable data. While similar tools usually focus on tabular data and programming instructions to transform it, this library can take any source structure—think JSON or nested XML document, but tables as well—and transform it into an arbitrary destination format. Instead of functions to transform the data, it is based on simple meta information that describes field conversion, type casting, filtering and nesting.\r\n\r\nThis meta information can easily be reused and, rather than programming code, a GUI may be built that allows novice user to create complex data transformations.\r\n\r\nExamples: Convert an untyped, badly formatted CSV file into valid GeoJSON geometry. Take spreadsheet data where rows are cities and 50 columns list population numbers per year, and turn it into a data stream that emits a Mongoose model instance for each city, each year.\r\n\r\nExamples\r\n--------\r\n\r\n### Simple number filtering\r\n\r\nConsider the following object:\r\n\r\n```javascript\r\n\tvar obj = {\r\n\t\tnumbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\t};\r\n```\r\n\r\nAssuming we would like to traverse the numbers array, and construct a second object where the numbers are filtered into two separate arrays, one containing odd numbers only, and another one containing the even numbers.\r\n\r\nWe can describe this transformation with the following meta information:\r\n\r\n```javascript\r\n\t// we instantiate a new DataTransform instance:\r\n\tvar oddEven = new transmeta.DataTransform()\r\n\t\t// we add a meta description for odd numbers:\r\n\t\t.field({\r\n\t\t\t'from': 'numbers',         // the element the source data is from\r\n\t\t\t'to': 'odd',               // the destination element\r\n\t\t\t'type': 'Array',           // the type of the destination element\r\n\t\t\t'options': {\r\n\t\t\t\t'filters': ['isOdd']   // a built-in number filter for odd numbers\r\n\t\t\t}\r\n\t\t})\r\n\t\t// and the same for even numbers:\r\n\t\t.field({\r\n\t\t\t'from': 'numbers',\r\n\t\t\t'to': 'even',\r\n\t\t\t'type': 'Array',\r\n\t\t\t'options': {\r\n\t\t\t\t'filters': ['isEven']\r\n\t\t\t}\r\n\t\t});\r\n```\r\n\r\nFinally, we run the transformation, and asyncronously receive the transformed result:\r\n\r\n```javascript\r\n\toddEven.transform(obj)\r\n\t\t.on('data', function(transformed) {\r\n\t\t\tconsole.log(transformed);\r\n\t\t\t// { odd: [ 1, 3, 5, 7, 9 ], even: [ 2, 4, 6, 8, 10 ] }\r\n\t\t});\r\n```\r\n\r\n\r\n### Emitting a series of models\r\n\r\nConsider the following CSV data, exported from a spreadsheet listing urban agglomerations per year:\r\n\r\n```csv\r\n\tCountry,City,Latitude,Longitude,1950,1955,1960,1965,1970,1975,1980,1985,1990,1995,2000,2005,2010,2015,2020,2025\r\n\tJapan,Tokyo,35.69,139.75,11274641,13712679,16678821,20284371,23297503,26614733,28548512,30303794,32530003,33586573,34449908,35621544,36932780,38196677,38707439,38661394\r\n\tIndia,Delhi,28.67,77.22,1369369,1781624,2282962,2845042,3530693,4425964,5558481,7325185,9725885,12407372,15732304,18670494,21935142,25628951,29273777,32935013\r\n\tChina,Shanghai,31.23,121.47,4300942,5846383,6819634,6428131,6036492,5626640,5966171,6846765,7823028,10449535,13958981,16590006,19554059,22962830,26120519,28403898'\r\n```\r\n\r\nWe can easily turn this into a `DocumentSet` using the following code:\r\n\r\n```javascript\r\n\t// we define a comma-delimited DocumentSet\r\n\tvar cities = new transmeta.DocumentSet({delimiter: ','});\r\n\t// for each row in the data:\r\n\tcsvData.split('\\n').forEach(row, index) {\r\n\t\tif (index == 0) {\r\n\t\t\t// the first row is the header\r\n\t\t\tcities.header(row);\r\n\t\t} else {\r\n\t\t\t// all others are added as Documents\r\n\t\t\tcities.add(row);\r\n\t\t}\r\n\t});\r\n```\r\n\r\nNext, we would like to transform this into a series of Mongoose documents with the following schema:\r\n\r\n```javascript\r\n\tvar schema = new mongoose.Schema({ \r\n\t\tname: String, \r\n\t\tpopulation: Number, \r\n\t\tyear: Date \r\n\t});\r\n\tvar CityModel = mongoose.model('City', schema);\r\n```\r\n\r\nThe meta description to perform this transformation looks quite simple:\r\n\r\n```javascript\r\n\tvar meta = [\r\n\t\t{\r\n\t\t\t'from': 'City',\r\n\t\t\t'to': 'name',\r\n\t\t\t'type': 'String',\r\n\t\t},\r\n\t\t{\r\n\t\t\t'from': [1950,1955,1960,1965,1970,1975,1980,1985,1990,1995,2000,2005,2010,2015,2020,2025],\r\n\t\t\t'to': 'population',\r\n\t\t\t'type': 'Number',\r\n\t\t\t'series': [\r\n\t\t\t\t{\r\n\t\t\t\t\t'to': 'year',\r\n\t\t\t\t\t'from': '$series.from',\r\n\t\t\t\t\t'type': 'Date',\r\n\t\t\t\t},\r\n\t\t\t]\r\n\t\t},\r\n\t];\r\n```\r\n\r\nRunning this transformation will emit a City instance for each year, per each city:\r\n\r\n```javascript\r\n\t// we create a new DataTransform instance with above meta information\r\n\tnew transmeta.DataTransform(meta)\r\n\t\t// we transform the cities set with the Mongoose model as destination type\r\n\t\t.tranform(cities, CityModel)\r\n\t\t.on('data', function(document) {\r\n\t\t\t// we save each emitted model instance in the database\t\t\r\n\t\t\tdocument.save();\r\n\t\t});\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}